// Copyright (C) 2023 Entropy Cryptography Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2024-09-16, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `turnip`, CPU: `Intel(R) Core(TM) i7-4710MQ CPU @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --pallet=pallet_registry
// --extrinsic=*
// --steps=5
// --repeat=2
// --header=.maintain/AGPL-3.0-header.txt
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_registry.
pub trait WeightInfo {
	fn register(_p: u32) -> Weight;
	fn jump_start_network() -> Weight;
	fn confirm_jump_start_done(c: u32, ) -> Weight;
	fn confirm_jump_start_confirm(c: u32, ) -> Weight;
	fn change_program_instance(n: u32, o:u32) -> Weight;
	fn change_program_modification_account(n: u32) -> Weight;
}

/// Weights for pallet_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::NextRandomness` (r:1 w:0)
	/// Proof: `Babe::NextRandomness` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Babe::EpochStart` (r:1 w:0)
	/// Proof: `Babe::EpochStart` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::ThresholdServers` (r:3 w:0)
	/// Proof: `StakingExtension::ThresholdServers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:0 w:1)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn jump_start_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1069`
		//  Estimated: `9484`
		// Minimum execution time: 65_265_000 picoseconds.
		Weight::from_parts(72_083_000, 0)
			.saturating_add(Weight::from_parts(0, 9484))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:2 w:0)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::Signers` (r:0 w:1)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 15]`.
	fn confirm_jump_start_done(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `999`
		//  Estimated: `6939`
		// Minimum execution time: 55_835_000 picoseconds.
		Weight::from_parts(70_728_113, 0)
			.saturating_add(Weight::from_parts(0, 6939))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:2 w:0)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 15]`.
	fn confirm_jump_start_confirm(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `701`
		//  Estimated: `6641`
		// Minimum execution time: 52_934_000 picoseconds.
		Weight::from_parts(73_613_162, 0)
			.saturating_add(Weight::from_parts(0, 6641))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Programs::Programs` (r:1 w:1)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:0)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::CounterForRegistered` (r:1 w:1)
	/// Proof: `Registry::CounterForRegistered` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::ModifiableKeys` (r:1 w:1)
	/// Proof: `Registry::ModifiableKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 5]`.
	fn register(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `550`
		//  Estimated: `4015`
		// Minimum execution time: 929_049_000 picoseconds.
		Weight::from_parts(947_220_150, 0)
			.saturating_add(Weight::from_parts(0, 4015))
			// Standard Error: 8_259_373
			.saturating_add(Weight::from_parts(6_818_350, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Programs::Programs` (r:2 w:2)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 5]`.
	/// The range of component `o` is `[1, 5]`.
	fn change_program_instance(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `537 + o * (33 ±0)`
		//  Estimated: `6477 + o * (33 ±0)`
		// Minimum execution time: 65_712_000 picoseconds.
		Weight::from_parts(50_253_750, 0)
			.saturating_add(Weight::from_parts(0, 6477))
			// Standard Error: 3_573_191
			.saturating_add(Weight::from_parts(3_433_552, 0).saturating_mul(n.into()))
			// Standard Error: 3_573_191
			.saturating_add(Weight::from_parts(5_104_569, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(o.into()))
	}
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::ModifiableKeys` (r:1 w:1)
	/// Proof: `Registry::ModifiableKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 25]`.
	fn change_program_modification_account(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `251 + n * (1 ±0)`
		//  Estimated: `3716 + n * (1 ±0)`
		// Minimum execution time: 37_528_000 picoseconds.
		Weight::from_parts(48_652_091, 0)
			.saturating_add(Weight::from_parts(0, 3716))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::NextRandomness` (r:1 w:0)
	/// Proof: `Babe::NextRandomness` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Babe::EpochStart` (r:1 w:0)
	/// Proof: `Babe::EpochStart` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::ThresholdServers` (r:3 w:0)
	/// Proof: `StakingExtension::ThresholdServers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:0 w:1)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn jump_start_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1069`
		//  Estimated: `9484`
		// Minimum execution time: 65_265_000 picoseconds.
		Weight::from_parts(72_083_000, 0)
			.saturating_add(Weight::from_parts(0, 9484))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:2 w:0)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::Signers` (r:0 w:1)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 15]`.
	fn confirm_jump_start_done(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `999`
		//  Estimated: `6939`
		// Minimum execution time: 55_835_000 picoseconds.
		Weight::from_parts(70_728_113, 0)
			.saturating_add(Weight::from_parts(0, 6939))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:2 w:0)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 15]`.
	fn confirm_jump_start_confirm(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `701`
		//  Estimated: `6641`
		// Minimum execution time: 52_934_000 picoseconds.
		Weight::from_parts(73_613_162, 0)
			.saturating_add(Weight::from_parts(0, 6641))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: `Programs::Programs` (r:1 w:1)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:0)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::CounterForRegistered` (r:1 w:1)
	/// Proof: `Registry::CounterForRegistered` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::ModifiableKeys` (r:1 w:1)
	/// Proof: `Registry::ModifiableKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 5]`.
	fn register(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `550`
		//  Estimated: `4015`
		// Minimum execution time: 929_049_000 picoseconds.
		Weight::from_parts(947_220_150, 0)
			.saturating_add(Weight::from_parts(0, 4015))
			// Standard Error: 8_259_373
			.saturating_add(Weight::from_parts(6_818_350, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: `Programs::Programs` (r:2 w:2)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 5]`.
	/// The range of component `o` is `[1, 5]`.
	fn change_program_instance(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `537 + o * (33 ±0)`
		//  Estimated: `6477 + o * (33 ±0)`
		// Minimum execution time: 65_712_000 picoseconds.
		Weight::from_parts(50_253_750, 0)
			.saturating_add(Weight::from_parts(0, 6477))
			// Standard Error: 3_573_191
			.saturating_add(Weight::from_parts(3_433_552, 0).saturating_mul(n.into()))
			// Standard Error: 3_573_191
			.saturating_add(Weight::from_parts(5_104_569, 0).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(o.into()))
	}
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::ModifiableKeys` (r:1 w:1)
	/// Proof: `Registry::ModifiableKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 25]`.
	fn change_program_modification_account(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `251 + n * (1 ±0)`
		//  Estimated: `3716 + n * (1 ±0)`
		// Minimum execution time: 37_528_000 picoseconds.
		Weight::from_parts(48_652_091, 0)
			.saturating_add(Weight::from_parts(0, 3716))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
}
