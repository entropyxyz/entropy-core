
//! Autogenerated weights for pallet_free_tx
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `hcastano`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet
// pallet_free_tx
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// .maintain/frame-weight-template.hbs
// --output
// pallets/free-tx/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_free_tx.
pub trait WeightInfo {
	fn call_using_electricity() -> Weight;
	fn set_individual_electricity_era_limit() -> Weight;
	fn set_battery_count() -> Weight;
	fn give_zaps() -> Weight;
}

/// Weights for pallet_free_tx using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `FreeTx::MaxUserElectricityUsagePerEra` (r:1 w:0)
	/// Proof: `FreeTx::MaxUserElectricityUsagePerEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `FreeTx::ElectricalAccount` (r:1 w:1)
	/// Proof: `FreeTx::ElectricalAccount` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn call_using_electricity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `748`
		//  Estimated: `3529`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3529)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FreeTx::MaxUserElectricityUsagePerEra` (r:0 w:1)
	/// Proof: `FreeTx::MaxUserElectricityUsagePerEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_individual_electricity_era_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FreeTx::ElectricalAccount` (r:1 w:1)
	/// Proof: `FreeTx::ElectricalAccount` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn set_battery_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3529`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3529)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `FreeTx::ElectricalAccount` (r:1 w:1)
	/// Proof: `FreeTx::ElectricalAccount` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn give_zaps() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3529`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3529)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `FreeTx::MaxUserElectricityUsagePerEra` (r:1 w:0)
	/// Proof: `FreeTx::MaxUserElectricityUsagePerEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `FreeTx::ElectricalAccount` (r:1 w:1)
	/// Proof: `FreeTx::ElectricalAccount` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn call_using_electricity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `748`
		//  Estimated: `3529`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3529)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `FreeTx::MaxUserElectricityUsagePerEra` (r:0 w:1)
	/// Proof: `FreeTx::MaxUserElectricityUsagePerEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_individual_electricity_era_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `FreeTx::ElectricalAccount` (r:1 w:1)
	/// Proof: `FreeTx::ElectricalAccount` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn set_battery_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3529`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3529)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `FreeTx::ElectricalAccount` (r:1 w:1)
	/// Proof: `FreeTx::ElectricalAccount` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	fn give_zaps() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3529`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 3529)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
