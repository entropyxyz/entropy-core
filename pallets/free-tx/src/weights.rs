
//! Autogenerated weights for `pallet_free_tx`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_free_tx
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(clippy::all)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{constants::RocksDbWeight, Weight}};
use sp_std::marker::PhantomData;


pub trait WeightInfo {
	fn call_using_electricity() -> Weight;
	fn set_individual_electricity_era_limit() -> Weight;
	fn set_battery_count() -> Weight;
	fn give_zaps() -> Weight;
}

/// Weight functions for `pallet_free_tx`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: FreeTx MaxUserElectricityUsagePerEra (r:1 w:0)
	/// Proof: FreeTx MaxUserElectricityUsagePerEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: FreeTx ElectricalAccount (r:1 w:1)
	/// Proof: FreeTx ElectricalAccount (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Staking CurrentEra (r:1 w:0)
	/// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn call_using_electricity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `715`
		//  Estimated: `3529`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(43_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: FreeTx MaxUserElectricityUsagePerEra (r:0 w:1)
	/// Proof: FreeTx MaxUserElectricityUsagePerEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_individual_electricity_era_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: FreeTx ElectricalAccount (r:1 w:1)
	/// Proof: FreeTx ElectricalAccount (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn set_battery_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3529`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: FreeTx ElectricalAccount (r:1 w:1)
	/// Proof: FreeTx ElectricalAccount (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn give_zaps() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3529`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests

impl WeightInfo for () {
	/// Storage: FreeTx MaxUserElectricityUsagePerEra (r:1 w:0)
	/// Proof: FreeTx MaxUserElectricityUsagePerEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: FreeTx ElectricalAccount (r:1 w:1)
	/// Proof: FreeTx ElectricalAccount (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// Storage: Staking CurrentEra (r:1 w:0)
	/// Proof: Staking CurrentEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn call_using_electricity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `715`
		//  Estimated: `3529`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(43_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: FreeTx MaxUserElectricityUsagePerEra (r:0 w:1)
	/// Proof: FreeTx MaxUserElectricityUsagePerEra (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_individual_electricity_era_limit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_000_000 picoseconds.
		Weight::from_parts(7_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: FreeTx ElectricalAccount (r:1 w:1)
	/// Proof: FreeTx ElectricalAccount (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn set_battery_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3529`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(13_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: FreeTx ElectricalAccount (r:1 w:1)
	/// Proof: FreeTx ElectricalAccount (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn give_zaps() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3529`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3529))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
