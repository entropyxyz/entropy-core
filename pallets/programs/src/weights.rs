
//! Autogenerated weights for pallet_programs
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-10-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `hcastano`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/debug/entropy
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_programs
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// frame-weight-template.hbs
// --output
// pallets/programs/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_programs.
pub trait WeightInfo {
	fn update_program() -> Weight;
}

/// Weights for pallet_programs using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Programs AllowedToModifyPrograms (r:1 w:0)
	/// Proof Skipped: Programs AllowedToModifyPrograms (max_values: None, max_size: None, mode: Measured)
	/// Storage: Programs Bytecode (r:1 w:1)
	/// Proof Skipped: Programs Bytecode (max_values: None, max_size: None, mode: Measured)
	fn update_program() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `236`
		//  Estimated: `3701`
		// Minimum execution time: 498_000_000 picoseconds.
		Weight::from_parts(502_000_000, 3701)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Programs AllowedToModifyPrograms (r:1 w:0)
	/// Proof Skipped: Programs AllowedToModifyPrograms (max_values: None, max_size: None, mode: Measured)
	/// Storage: Programs Bytecode (r:1 w:1)
	/// Proof Skipped: Programs Bytecode (max_values: None, max_size: None, mode: Measured)
	fn update_program() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `236`
		//  Estimated: `3701`
		// Minimum execution time: 498_000_000 picoseconds.
		Weight::from_parts(502_000_000, 3701)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
