commands:
    fmt-lint:
        steps:
            - run:
                name: Format and lint.
                command: |
                  curl -LsSf https://github.com/tamasfe/taplo/releases/download/0.8.0/taplo-full-linux-x86_64.gz | gunzip -N -d - > ${CARGO_HOME:-~/.cargo}/bin/taplo && chmod +x ${CARGO_HOME:-~/.cargo}/bin/taplo
                  cargo fmt --check
                  taplo fmt --check
                  cargo clippy -- -D warnings
    check-licenses:
        steps:
            - run:
                name: Check licenses (`cargo-deny`).
                command: |
                  cargo install --locked cargo-deny
                  cargo deny --all-features check license
    increase-swap:
        steps:
            - run:
                name: Increase swap.
                command: |
                  sudo swapoff -a
                  sudo dd if=/dev/zero of=/swapfile bs=1G count=8
                  sudo chmod 0600 /swapfile
                  sudo mkswap /swapfile
                  sudo swapon /swapfile
                  grep Swap /proc/meminfo
    install-dependencies:
        steps:
            - run:
                name: Install dependencies.
                command: |
                  sudo sed -i "/#\$nrconf{restart} = 'i';/s/.*/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf
                  sudo apt-get update
                  sudo apt install -y libssl-dev clang libclang-dev tor && sudo systemctl start tor && sudo systemctl enable tor
                  sudo apt install -y yarn
    install-rust:
        steps:
            - run:
                name: Install Rust.
                command: |
                  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
                  source "$HOME/.cargo/env"
                  rustup update stable
                  rustup target add wasm32-unknown-unknown
                  rustup component add rust-src
    install-wasm-pack:
        steps:
            - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    install-dependencies-and-checkout:
        steps:
            - install-dependencies
            - checkout
            - install-dependencies
            - install-rust
            - install-wasm-pack
    new-cmd:
        steps:
            - run: echo test
    build:
        steps:
            - run: cargo build --release
    comment-on-pr:
        steps:
            - run: |
                sudo apt-get install jq
                pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
                -u $GH_USER:$GH_TOKEN)
                if [ $(echo $pr_response | jq length) -eq 0 ]; then
                  echo "No PR found to update"
                else
                  pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")
                fi
                echo curl --location --request POST "$pr_comment_url" \
                -u $GH_USER:$GH_TOKEN \
                --header 'Content-Type: application/json' \
                --data-raw "'{
                \"body\": \"$(cat pr-comment)\"
                }'"

jobs:
    threshold-signature-server:
        machine:
            image: ubuntu-2204:2022.10.2
            resource_class: xlarge
        steps:
            - install-dependencies-and-checkout
            - run: cd crates/threshold-signature-server && cargo test --release
    fmt-lint-all:
        machine:
            image: ubuntu-2204:2022.10.2
            resource_class: xlarge
        steps:
            - install-dependencies-and-checkout
            - fmt-lint
            - check-licenses
    node-benchmark:
        machine:
            image: ubuntu-2204:2022.10.2
            resource_class: xlarge
        steps:
            - install-dependencies-and-checkout
            - run: pushd node && cargo check --features=runtime-benchmarks
    node-test:
        machine:
            image: ubuntu-2204:2022.10.2
            resource_class: xlarge
        steps:
            - increase-swap
            - install-dependencies-and-checkout
            - run:
                name: Build entropy-protocol nodejs package.
                command: |
                  cd crates/protocol
                  make build-nodejs-testing
                  cd nodejs-test
                  yarn
                  cd ../../..
            - run:
                command: |
                    pushd node
                    cargo build --all-targets --release -j $(nproc)
                    cargo test --all-targets --release
                    yarn --cwd ../crates/protocol/nodejs-test test
                    cargo test -p entropy-tss --release --features=test_helpers -F wasm_test test_wasm
                no_output_timeout: 45m
    build-and-release:
        machine:
            image: ubuntu-2204:2022.10.2
            resource_class: xlarge
        steps:
            - increase-swap
            - install-dependencies-and-checkout
            - build
            - release
    check-doc-build:
        machine:
            image: ubuntu-2204:2022.10.2
            resource_class: xlarge
        steps:
            - install-dependencies-and-checkout
            - run: cargo doc --no-deps
    check-chainspecs:
        machine:
            image: ubuntu-2204:2022.10.2
            resource_class: xlarge
        steps:
            - install-dependencies-and-checkout
            - run:
                command: |
                    cargo run -p entropy -- build-spec --raw --chain dev > chainspec-dev-raw.json
                    cargo run -p entropy -- build-spec --raw --chain integration-tests > chainspec-integration-raw.json
                    cargo run -p entropy -- build-spec --raw --chain testnet > chainspec-testnet-raw.json


parameters:
    crates:
        default: false
        type: boolean
    node:
        default: false
        type: boolean
    pallets:
        default: false
        type: boolean
    runtime:
        default: false
        type: boolean
version: 2.1
workflows:
    lint:
        jobs:
            - fmt-lint-all
    test:
        jobs:
            - node-benchmark
    build:
        jobs:
            - node-test
        when:
            or:
                - << pipeline.parameters.node >>
                - << pipeline.parameters.pallets >>
                - << pipeline.parameters.runtime >>
                - pipeline.parameters.crates
    chainspecs:
        jobs:
            - check-chainspecs
    documentation:
        jobs:
            - check-doc-build
