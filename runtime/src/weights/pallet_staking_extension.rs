#![allow(clippy::all)]

//! Autogenerated weights for `pallet_staking_extension`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-06, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MacBook-Pro-9.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet_staking_extension
// --extrinsic=*
// --steps=50
// --repeat=20
// --header=./file_header.txt
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_staking_extension`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_staking_extension::WeightInfo for WeightInfo<T> {
	// Storage: Staking Ledger (r:1 w:0)
	// Storage: StakingExtension ThresholdServers (r:1 w:1)
	fn change_endpoint() -> Weight {
		Weight::from_ref_time(64_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Storage: StakingExtension ThresholdServers (r:1 w:1)
	// Storage: StakingExtension ThresholdToStash (r:0 w:1)
	fn change_threshold_accounts() -> Weight {
		Weight::from_ref_time(54_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Staking Ledger (r:1 w:1)
	// Storage: Staking CurrentEra (r:1 w:0)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn withdraw_unbonded() -> Weight {
		Weight::from_ref_time(77_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Staking Ledger (r:1 w:0)
	// Storage: Staking MinValidatorBond (r:1 w:0)
	// Storage: Staking MinCommission (r:1 w:0)
	// Storage: Staking Validators (r:1 w:1)
	// Storage: Staking MaxValidatorsCount (r:1 w:0)
	// Storage: Staking Nominators (r:1 w:0)
	// Storage: Staking Bonded (r:1 w:0)
	// Storage: BagsList ListNodes (r:1 w:1)
	// Storage: BagsList ListBags (r:1 w:1)
	// Storage: BagsList CounterForListNodes (r:1 w:1)
	// Storage: Staking CounterForValidators (r:1 w:1)
	// Storage: StakingExtension ThresholdServers (r:0 w:1)
	// Storage: StakingExtension ThresholdToStash (r:0 w:1)
	fn validate() -> Weight {
		Weight::from_ref_time(119_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: StakingExtension ThresholdToStash (r:1 w:0)
	// Storage: StakingExtension IsValidatorSynced (r:0 w:1)
	fn declare_synced() -> Weight {
		Weight::from_ref_time(33_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: StakingExtension SigningGroups (r:2 w:2)
	/// The range of component `c` is `[0, 1000]`.
	/// The range of component `n` is `[0, 1000]`.
	fn new_session_handler_helper(c: u32, n: u32, ) -> Weight {
		Weight::from_ref_time(39_000_000 as u64)
			// Standard Error: 42_909
			.saturating_add(Weight::from_ref_time(1_364_743 as u64).saturating_mul(c as u64))
			// Standard Error: 42_909
			.saturating_add(Weight::from_ref_time(1_392_245 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}
