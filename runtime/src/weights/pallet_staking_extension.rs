// Copyright (C) 2023 Entropy Cryptography Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_staking_extension`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.2.0
//! DATE: 2025-07-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-16-1-168`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet=pallet_staking_extension
// --extrinsic=*
// --steps=50
// --repeat=20
// --header=.maintain/AGPL-3.0-header.txt
// --template
// .maintain/frame-weight-template.hbs
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_staking_extension`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_staking_extension::WeightInfo for WeightInfo<T> {
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::ThresholdServers` (r:1 w:1)
	/// Proof: `StakingExtension::ThresholdServers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Attestation::PendingAttestations` (r:1 w:1)
	/// Proof: `Attestation::PendingAttestations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::AcceptedMeasurementValues` (r:1 w:0)
	/// Proof: `Parameters::AcceptedMeasurementValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn change_endpoint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3125`
		//  Estimated: `6590`
		// Minimum execution time: 5_586_169_000 picoseconds.
		Weight::from_parts(5_780_994_000, 0)
			.saturating_add(Weight::from_parts(0, 6590))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:1)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::Signers` (r:1 w:0)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::ThresholdServers` (r:1 w:1)
	/// Proof: `StakingExtension::ThresholdServers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Attestation::PendingAttestations` (r:1 w:1)
	/// Proof: `Attestation::PendingAttestations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::AcceptedMeasurementValues` (r:1 w:0)
	/// Proof: `Parameters::AcceptedMeasurementValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[0, 15]`.
	fn change_threshold_accounts(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3306 + s * (32 ±0)`
		//  Estimated: `6770 + s * (32 ±0)`
		// Minimum execution time: 5_438_631_000 picoseconds.
		Weight::from_parts(5_745_577_309, 0)
			.saturating_add(Weight::from_parts(0, 6770))
			// Standard Error: 591_880
			.saturating_add(Weight::from_parts(5_118_108, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(s.into()))
	}
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::Signers` (r:1 w:0)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::NextSigners` (r:1 w:0)
	/// Proof: `StakingExtension::NextSigners` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::MinNominatorBond` (r:1 w:0)
	/// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Staking::VirtualStakers` (r:1 w:0)
	/// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:0)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:1 w:1)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 15]`.
	/// The range of component `n` is `[0, 16]`.
	fn unbond(s: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2028 + n * (32 ±0) + s * (64 ±0)`
		//  Estimated: `4556 + n * (32 ±0) + s * (64 ±0)`
		// Minimum execution time: 109_479_000 picoseconds.
		Weight::from_parts(111_354_431, 0)
			.saturating_add(Weight::from_parts(0, 4556))
			// Standard Error: 6_672
			.saturating_add(Weight::from_parts(163_395, 0).saturating_mul(s.into()))
			// Standard Error: 6_240
			.saturating_add(Weight::from_parts(109_825, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(s.into()))
	}
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:1)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::Signers` (r:1 w:0)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::NextSigners` (r:1 w:0)
	/// Proof: `StakingExtension::NextSigners` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CounterForNominators` (r:1 w:1)
	/// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:2 w:2)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:1 w:1)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::CounterForListNodes` (r:1 w:1)
	/// Proof: `BagsList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 15]`.
	/// The range of component `n` is `[0, 16]`.
	fn chill(c: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1884 + c * (64 ±0) + n * (32 ±0)`
		//  Estimated: `6248 + c * (64 ±0) + n * (32 ±0)`
		// Minimum execution time: 98_664_000 picoseconds.
		Weight::from_parts(100_236_518, 0)
			.saturating_add(Weight::from_parts(0, 6248))
			// Standard Error: 7_004
			.saturating_add(Weight::from_parts(207_729, 0).saturating_mul(c.into()))
			// Standard Error: 6_551
			.saturating_add(Weight::from_parts(149_984, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(n.into()))
	}
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::Signers` (r:1 w:0)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::NextSigners` (r:1 w:0)
	/// Proof: `StakingExtension::NextSigners` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Staking::VirtualStakers` (r:1 w:0)
	/// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:0)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(193), added: 2668, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 15]`.
	/// The range of component `n` is `[0, 16]`.
	fn withdraw_unbonded(c: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1656 + c * (64 ±0) + n * (32 ±0)`
		//  Estimated: `4556 + c * (64 ±0) + n * (32 ±0)`
		// Minimum execution time: 72_164_000 picoseconds.
		Weight::from_parts(73_181_387, 0)
			.saturating_add(Weight::from_parts(0, 4556))
			// Standard Error: 5_403
			.saturating_add(Weight::from_parts(212_778, 0).saturating_mul(c.into()))
			// Standard Error: 5_053
			.saturating_add(Weight::from_parts(161_265, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 64).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(n.into()))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:1)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Attestation::PendingAttestations` (r:1 w:1)
	/// Proof: `Attestation::PendingAttestations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::AcceptedMeasurementValues` (r:1 w:0)
	/// Proof: `Parameters::AcceptedMeasurementValues` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1091), added: 3566, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinValidatorBond` (r:1 w:0)
	/// Proof: `Staking::MinValidatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinCommission` (r:1 w:0)
	/// Proof: `Staking::MinCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MaxValidatorsCount` (r:1 w:0)
	/// Proof: `Staking::MaxValidatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:2 w:2)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:1 w:1)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::CounterForListNodes` (r:1 w:1)
	/// Proof: `BagsList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CounterForValidators` (r:1 w:1)
	/// Proof: `Staking::CounterForValidators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::ThresholdServers` (r:0 w:1)
	/// Proof: `StakingExtension::ThresholdServers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn validate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2448`
		//  Estimated: `6248`
		// Minimum execution time: 5_663_887_000 picoseconds.
		Weight::from_parts(5_853_238_000, 0)
			.saturating_add(Weight::from_parts(0, 6248))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::NextSigners` (r:1 w:1)
	/// Proof: `StakingExtension::NextSigners` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 15]`.
	fn confirm_key_reshare_confirmed(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `818 + c * (32 ±0)`
		//  Estimated: `4307 + c * (30 ±0)`
		// Minimum execution time: 21_072_000 picoseconds.
		Weight::from_parts(22_032_124, 0)
			.saturating_add(Weight::from_parts(0, 4307))
			// Standard Error: 2_149
			.saturating_add(Weight::from_parts(45_321, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 30).saturating_mul(c.into()))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::NextSigners` (r:1 w:1)
	/// Proof: `StakingExtension::NextSigners` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::Signers` (r:0 w:1)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::RotateKeyshares` (r:0 w:1)
	/// Proof: `StakingExtension::RotateKeyshares` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn confirm_key_reshare_completed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1330`
		//  Estimated: `4795`
		// Minimum execution time: 23_158_000 picoseconds.
		Weight::from_parts(24_043_000, 0)
			.saturating_add(Weight::from_parts(0, 4795))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `StakingExtension::Signers` (r:1 w:0)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `s` is `[2, 15]`.
	fn new_session_base_weight(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `275 + s * (32 ±0)`
		//  Estimated: `1760 + s * (32 ±0)`
		// Minimum execution time: 9_612_000 picoseconds.
		Weight::from_parts(10_045_908, 0)
			.saturating_add(Weight::from_parts(0, 1760))
			// Standard Error: 1_013
			.saturating_add(Weight::from_parts(17_615, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(s.into()))
	}
	/// Storage: `StakingExtension::Signers` (r:1 w:0)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::ReshareData` (r:0 w:1)
	/// Proof: `StakingExtension::ReshareData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::NextSigners` (r:0 w:1)
	/// Proof: `StakingExtension::NextSigners` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::NextRandomness` (r:1 w:0)
	/// Proof: `Babe::NextRandomness` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Babe::EpochStart` (r:1 w:0)
	/// Proof: `Babe::EpochStart` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 14]`.
	/// The range of component `l` is `[0, 15]`.
	/// The range of component `v` is `[50, 100]`.
	/// The range of component `r` is `[0, 15]`.
	fn new_session(c: u32, _l: u32, v: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493 + c * (15 ±0)`
		//  Estimated: `2080 + c * (15 ±0) + r * (11364552184692736 ±340_282_366_920_938_463_463_374_607_431_768_211_455) + v * (18 ±2_466_463_158_054_763_722_435_771_498_496)`
		// Minimum execution time: 16_331_000 picoseconds.
		Weight::from_parts(31_859_944, 0)
			.saturating_add(Weight::from_parts(0, 2080))
			// Standard Error: 3_685
			.saturating_add(Weight::from_parts(1_337, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 15).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 11364552184692736).saturating_mul(r.into()))
			.saturating_add(Weight::from_parts(0, 18).saturating_mul(v.into()))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:2 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::Signers` (r:1 w:0)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Slashing::FailedRegistrations` (r:1 w:1)
	/// Proof: `Slashing::FailedRegistrations` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 13]`.
	fn report_unstable_peer(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `519 + s * (32 ±0)`
		//  Estimated: `6459 + s * (32 ±0)`
		// Minimum execution time: 26_206_000 picoseconds.
		Weight::from_parts(27_179_620, 0)
			.saturating_add(Weight::from_parts(0, 6459))
			// Standard Error: 2_628
			.saturating_add(Weight::from_parts(27_841, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 32).saturating_mul(s.into()))
	}
}