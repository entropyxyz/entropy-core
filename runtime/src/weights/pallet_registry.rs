// Copyright (C) 2023 Entropy Cryptography Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 33.0.0
//! DATE: 2024-10-03, STEPS: `25`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-28-93`, CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet=pallet_registry
// --extrinsic=*
// --steps=25
// --repeat=10
// --header=.maintain/AGPL-3.0-header.txt
// --template
// .maintain/frame-weight-template.hbs
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_registry`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_registry::WeightInfo for WeightInfo<T> {
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Babe::NextRandomness` (r:1 w:0)
	/// Proof: `Babe::NextRandomness` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Babe::EpochStart` (r:1 w:0)
	/// Proof: `Babe::EpochStart` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `StakingExtension::ThresholdServers` (r:3 w:0)
	/// Proof: `StakingExtension::ThresholdServers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:0 w:1)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn jump_start_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1236`
		//  Estimated: `9651`
		// Minimum execution time: 45_771_000 picoseconds.
		Weight::from_parts(47_233_000, 0)
			.saturating_add(Weight::from_parts(0, 9651))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:2 w:0)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::Signers` (r:0 w:1)
	/// Proof: `StakingExtension::Signers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 15]`.
	fn confirm_jump_start_done(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1937`
		//  Estimated: `7877`
		// Minimum execution time: 45_208_000 picoseconds.
		Weight::from_parts(48_370_077, 0)
			.saturating_add(Weight::from_parts(0, 7877))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::JumpstartDkg` (r:2 w:0)
	/// Proof: `Registry::JumpstartDkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:1)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Parameters::SignersInfo` (r:1 w:0)
	/// Proof: `Parameters::SignersInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 15]`.
	fn confirm_jump_start_confirm(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1672`
		//  Estimated: `7612`
		// Minimum execution time: 43_113_000 picoseconds.
		Weight::from_parts(45_765_659, 0)
			.saturating_add(Weight::from_parts(0, 7612))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Programs::Programs` (r:1 w:1)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::JumpStartProgress` (r:1 w:0)
	/// Proof: `StakingExtension::JumpStartProgress` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::CounterForRegistered` (r:1 w:1)
	/// Proof: `Registry::CounterForRegistered` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::ModifiableKeys` (r:1 w:1)
	/// Proof: `Registry::ModifiableKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 5]`.
	fn register(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `551`
		//  Estimated: `4016`
		// Minimum execution time: 816_237_000 picoseconds.
		Weight::from_parts(829_687_433, 0)
			.saturating_add(Weight::from_parts(0, 4016))
			// Standard Error: 199_820
			.saturating_add(Weight::from_parts(3_417_880, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Programs::Programs` (r:2 w:2)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 5]`.
	/// The range of component `o` is `[1, 5]`.
	fn change_program_instance(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `539 + o * (33 ±0)`
		//  Estimated: `6479 + o * (33 ±0)`
		// Minimum execution time: 46_500_000 picoseconds.
		Weight::from_parts(29_196_384, 0)
			.saturating_add(Weight::from_parts(0, 6479))
			// Standard Error: 43_469
			.saturating_add(Weight::from_parts(3_338_027, 0).saturating_mul(n.into()))
			// Standard Error: 43_469
			.saturating_add(Weight::from_parts(3_123_830, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(o.into()))
	}
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::ModifiableKeys` (r:1 w:1)
	/// Proof: `Registry::ModifiableKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 25]`.
	fn change_program_modification_account(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `251 + n * (1 ±0)`
		//  Estimated: `3716 + n * (1 ±0)`
		// Minimum execution time: 23_962_000 picoseconds.
		Weight::from_parts(25_415_243, 0)
			.saturating_add(Weight::from_parts(0, 3716))
			// Standard Error: 10_556
			.saturating_add(Weight::from_parts(128_620, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
}