// Copyright (C) 2023 Entropy Cryptography Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_registry`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 29.0.0
//! DATE: 2024-04-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `hcastano`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet=pallet_registry
// --extrinsic=*
// --steps=50
// --repeat=20
// --header=.maintain/AGPL-3.0-header.txt
// --template
// .maintain/frame-weight-template.hbs
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_registry`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_registry::WeightInfo for WeightInfo<T> {
	/// Storage: `Registry::Registering` (r:1 w:1)
	/// Proof: `Registry::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Programs::Programs` (r:1 w:1)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Dkg` (r:1 w:1)
	/// Proof: `Registry::Dkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 5]`.
	fn register(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `356`
		//  Estimated: `3821`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(21_276_927, 0)
			.saturating_add(Weight::from_parts(0, 3821))
			// Standard Error: 22_679
			.saturating_add(Weight::from_parts(3_143_282, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Registry::Registering` (r:1 w:1)
	/// Proof: `Registry::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Programs::Programs` (r:1 w:1)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 5]`.
	fn prune_registration(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `478`
		//  Estimated: `3943`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_326_693, 0)
			.saturating_add(Weight::from_parts(0, 3943))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Programs::Programs` (r:2 w:2)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Registered` (r:1 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 5]`.
	/// The range of component `o` is `[1, 5]`.
	fn change_program_instance(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `610 + o * (33 ±0)`
		//  Estimated: `6550 + o * (33 ±0)`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(24_272_663, 0)
			.saturating_add(Weight::from_parts(0, 6550))
			// Standard Error: 19_613
			.saturating_add(Weight::from_parts(2_985_284, 0).saturating_mul(n.into()))
			// Standard Error: 19_613
			.saturating_add(Weight::from_parts(2_974_645, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(Weight::from_parts(0, 33).saturating_mul(o.into()))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Registering` (r:1 w:1)
	/// Proof: `Registry::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::ValidatorToSubgroup` (r:1 w:0)
	/// Proof: `StakingExtension::ValidatorToSubgroup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_registering(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1376`
		//  Estimated: `4841`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(50_693_370, 0)
			.saturating_add(Weight::from_parts(0, 4841))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Registering` (r:1 w:1)
	/// Proof: `Registry::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::ValidatorToSubgroup` (r:1 w:0)
	/// Proof: `StakingExtension::ValidatorToSubgroup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_failed_registering(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1378`
		//  Estimated: `4843`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(41_497_790, 0)
			.saturating_add(Weight::from_parts(0, 4843))
			// Standard Error: 316_977
			.saturating_add(Weight::from_parts(1_923_480, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Registering` (r:1 w:1)
	/// Proof: `Registry::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::ValidatorToSubgroup` (r:1 w:0)
	/// Proof: `StakingExtension::ValidatorToSubgroup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::ModifiableKeys` (r:1 w:1)
	/// Proof: `Registry::ModifiableKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Registry::Registered` (r:0 w:1)
	/// Proof: `Registry::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_registered(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1402`
		//  Estimated: `4867`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(55_035_635, 0)
			.saturating_add(Weight::from_parts(0, 4867))
			// Standard Error: 344_229
			.saturating_add(Weight::from_parts(2_477_624, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}