#![allow(clippy::all)]

//! Autogenerated weights for `frame_election_provider_support`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `hcastano`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet=frame_election_provider_support
// --extrinsic=*
// --steps=50
// --repeat=20
// --header=.maintain/ignore_clippy_header.txt
// --template
// .maintain/frame-weight-template.hbs
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `frame_election_provider_support`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> frame_election_provider_support::WeightInfo for WeightInfo<T> {
	/// The range of component `v` is `[1000, 2000]`.
	/// The range of component `t` is `[500, 1000]`.
	/// The range of component `d` is `[5, 16]`.
	fn phragmen(v: u32, _t: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_780_000_000 picoseconds.
		Weight::from_parts(5_921_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 97_886
			.saturating_add(Weight::from_parts(4_370_803, 0).saturating_mul(v.into()))
			// Standard Error: 10_007_542
			.saturating_add(Weight::from_parts(940_706_722, 0).saturating_mul(d.into()))
	}
	/// The range of component `v` is `[1000, 2000]`.
	/// The range of component `t` is `[500, 1000]`.
	/// The range of component `d` is `[5, 16]`.
	fn phragmms(v: u32, _t: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_949_000_000 picoseconds.
		Weight::from_parts(4_000_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 81_420
			.saturating_add(Weight::from_parts(3_463_655, 0).saturating_mul(v.into()))
			// Standard Error: 8_324_160
			.saturating_add(Weight::from_parts(897_617_441, 0).saturating_mul(d.into()))
	}
}