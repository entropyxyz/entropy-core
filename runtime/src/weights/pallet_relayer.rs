// Copyright (C) 2023 Entropy Cryptography Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_relayer`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-09, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Jesses-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --pallet=pallet_relayer
// --extrinsic=*
// --steps=5
// --repeat=2
// --header=.maintain/AGPL-3.0-header.txt
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_relayer`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_relayer::WeightInfo for WeightInfo<T> {
	/// Storage: `Relayer::Registered` (r:1 w:0)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Programs::Programs` (r:1 w:1)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Dkg` (r:1 w:1)
	/// Proof: `Relayer::Dkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 5]`.
	fn register(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `401`
		//  Estimated: `3866`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(19_100_000, 0)
			.saturating_add(Weight::from_parts(0, 3866))
			// Standard Error: 134_629
			.saturating_add(Weight::from_parts(2_000_000, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Programs::Programs` (r:1 w:1)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[1, 5]`.
	fn prune_registration(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `468`
		//  Estimated: `3933`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_500_000, 0)
			.saturating_add(Weight::from_parts(0, 3933))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Programs::Programs` (r:2 w:2)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registered` (r:1 w:1)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 5]`.
	/// The range of component `o` is `[1, 5]`.
	fn change_program_pointer(n: u32, _o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `633`
		//  Estimated: `6573`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(21_750_000, 0)
			.saturating_add(Weight::from_parts(0, 6573))
			// Standard Error: 140_236
			.saturating_add(Weight::from_parts(1_980_952, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_registering(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16535`
		//  Estimated: `20000`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(25_583_333, 0)
			.saturating_add(Weight::from_parts(0, 20000))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_failed_registering(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16537`
		//  Estimated: `20002`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(24_083_333, 0)
			.saturating_add(Weight::from_parts(0, 20002))
			// Standard Error: 954_703
			.saturating_add(Weight::from_parts(1_750_000, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registered` (r:0 w:1)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_registered(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16536`
		//  Estimated: `20001`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(26_833_333, 0)
			.saturating_add(Weight::from_parts(0, 20001))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
