#![allow(clippy::all)]

//! Autogenerated weights for `pallet_relayer`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-02, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Jesses-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet=pallet_relayer
// --extrinsic=*
// --steps=5
// --repeat=2
// --template
// .maintain/frame-weight-template.hbs
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_relayer`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_relayer::WeightInfo for WeightInfo<T> {
	/// Storage: `Relayer::Registered` (r:1 w:0)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Programs::Programs` (r:1 w:0)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Dkg` (r:1 w:1)
	/// Proof: `Relayer::Dkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[0, 5]`.
	fn register(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `380`
		//  Estimated: `3845 + p * (37 ±15)`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_898_648, 0)
			.saturating_add(Weight::from_parts(0, 3845))
			// Standard Error: 173_337
			.saturating_add(Weight::from_parts(1_182_432, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn prune_registration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `200`
		//  Estimated: `3665`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3665))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Programs::Programs` (r:1 w:0)
	/// Proof: `Programs::Programs` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registered` (r:1 w:1)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[0, 5]`.
	fn change_program_pointer(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `3968 + p * (37 ±15)`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_898_648, 0)
			.saturating_add(Weight::from_parts(0, 3968))
			// Standard Error: 211_722
			.saturating_add(Weight::from_parts(1_682_432, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 37).saturating_mul(p.into()))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_registering(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16535`
		//  Estimated: `20000`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 0)
			.saturating_add(Weight::from_parts(0, 20000))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_failed_registering(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16537`
		//  Estimated: `20002`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_250_000, 0)
			.saturating_add(Weight::from_parts(0, 20002))
			// Standard Error: 780_624
			.saturating_add(Weight::from_parts(1_750_000, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registered` (r:0 w:1)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_registered(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16536`
		//  Estimated: `20001`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_500_000, 0)
			.saturating_add(Weight::from_parts(0, 20001))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}