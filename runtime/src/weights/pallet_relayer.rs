#![allow(clippy::all)]

//! Autogenerated weights for `pallet_relayer`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-01, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Jesses-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet=pallet_relayer
// --extrinsic=*
// --steps=5
// --repeat=2
// --header=./file_header.txt
// --template
// .maintain/frame-weight-template.hbs
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_relayer`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_relayer::WeightInfo for WeightInfo<T> {
	/// Storage: `Relayer::Registered` (r:1 w:0)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Dkg` (r:1 w:1)
	/// Proof: `Relayer::Dkg` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `p` is `[0, 1000000]`.
	fn register(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `3598`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_600_000, 0)
			.saturating_add(Weight::from_parts(0, 3598))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn prune_registration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `199`
		//  Estimated: `3664`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3664))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Relayer::Registered` (r:1 w:1)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn change_program_pointer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3720`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3720))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_registering(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16534`
		//  Estimated: `19999`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_750_000, 0)
			.saturating_add(Weight::from_parts(0, 19999))
			// Standard Error: 1_165_922
			.saturating_add(Weight::from_parts(250_000, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_failed_registering(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16536`
		//  Estimated: `20001`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(24_916_666, 0)
			.saturating_add(Weight::from_parts(0, 20001))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `StakingExtension::ThresholdToStash` (r:1 w:0)
	/// Proof: `StakingExtension::ThresholdToStash` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registering` (r:1 w:1)
	/// Proof: `Relayer::Registering` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `StakingExtension::SigningGroups` (r:1 w:0)
	/// Proof: `StakingExtension::SigningGroups` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Relayer::Registered` (r:0 w:1)
	/// Proof: `Relayer::Registered` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[0, 2]`.
	fn confirm_register_registered(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16535`
		//  Estimated: `20000`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_916_666, 0)
			.saturating_add(Weight::from_parts(0, 20000))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}