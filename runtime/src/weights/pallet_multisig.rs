#![allow(clippy::all)]

//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-22, STEPS: `5`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Jesses-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/entropy
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet=pallet_multisig
// --extrinsic=*
// --steps=5
// --repeat=2
// --header=./file_header.txt
// --output=./runtime/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_multisig`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(9_700_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 116
			.saturating_add(Weight::from_parts(460, 0).saturating_mul(z.into()))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `344 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(31_850_024, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 15_695
			.saturating_add(Weight::from_parts(39_079, 0).saturating_mul(s.into()))
			// Standard Error: 154
			.saturating_add(Weight::from_parts(1_196, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `6811`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(14_298_087, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 12_926
			.saturating_add(Weight::from_parts(61_950, 0).saturating_mul(s.into()))
			// Standard Error: 125
			.saturating_add(Weight::from_parts(1_402, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `487 + s * (33 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(41_120_918, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 35_677
			.saturating_add(Weight::from_parts(35_531, 0).saturating_mul(s.into()))
			// Standard Error: 350
			.saturating_add(Weight::from_parts(310, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `344 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(28_813_653, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 7_456
			.saturating_add(Weight::from_parts(48_943, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `348`
		//  Estimated: `6811`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_507_163, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 6_343
			.saturating_add(Weight::from_parts(53_008, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Multisig::Multisigs` (r:1 w:1)
	/// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `519 + s * (1 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(27_136_902, 0)
			.saturating_add(Weight::from_parts(0, 6811))
			// Standard Error: 13_395
			.saturating_add(Weight::from_parts(89_824, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
